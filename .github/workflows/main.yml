name: Build and Deploy

on:
  push:
    branches:
      - main

jobs:
  run-unit-tests:
    runs-on: ubuntu-latest
    name: Run Unit Tests for Backend Services
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install and Run Unit Tests
        run: |
          for service in backend/*; do
            if [ -f "$service/package.json" ]; then
              cd $service
              npm install
              npm test
              cd -
            fi
          done

  build-and-deploy-backend:
    runs-on: ubuntu-latest
    name: Build and Deploy Backend Services
    needs: run-unit-tests
    if: success()
    env:
      DOCKER_REGISTRY: docker.io
      SSH_PORT: 23
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Backend Services
        run: |
          declare -A service_ports=( 
            ["auth-service"]=3005
            ["new-user-service"]=3006
            ["prompt-service"]=3003
            ["start-vm-service"]=3001
            ["update-key-service"]=3002
            ["user-service"]=3004
          )
          for service in "${!service_ports[@]}"; do
            docker build -t $DOCKER_REGISTRY/${{ secrets.DOCKER_USERNAME }}/$service:latest backend/$service
            docker push $DOCKER_REGISTRY/${{ secrets.DOCKER_USERNAME }}/$service:latest
          done

      - name: Deploy Backend Services
        run: |
          declare -A service_ports=( 
            ["auth-service"]=3005
            ["new-user-service"]=3006
            ["prompt-service"]=3003
            ["start-vm-service"]=3001
            ["update-key-service"]=3002
            ["user-service"]=3004
          )
          for service in "${!service_ports[@]}"; do
            port=${service_ports[$service]}
            if [ "$service" == "prompt-service" ]; then
              env_var="-e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} -e CONTAINER_SERVICE_KEY=${{ secrets.CONTAINER_SERVICE_KEY }}"
            else
              env_var="-e CONTAINER_SERVICE_KEY=${{ secrets.CONTAINER_SERVICE_KEY }}"
            fi
            sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no -p $SSH_PORT ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} <<EOF
              docker pull $DOCKER_REGISTRY/${{ secrets.DOCKER_USERNAME }}/$service:latest
              docker stop $service || true
              docker rm $service || true
              docker run -d --name $service -p $port:$port $env_var $DOCKER_REGISTRY/${{ secrets.DOCKER_USERNAME }}/$service:latest
          EOF
          done

  build-and-deploy-frontend:
    runs-on: ubuntu-latest
    name: Build and Deploy Frontend
    env:
      DOCKER_REGISTRY: docker.io
      SSH_PORT: 23
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Frontend
        run: |
          docker build -t $DOCKER_REGISTRY/${{ secrets.DOCKER_USERNAME }}/frontend:latest frontend
          docker push $DOCKER_REGISTRY/${{ secrets.DOCKER_USERNAME }}/frontend:latest

      - name: Deploy Frontend
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no -p $SSH_PORT ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} <<EOF
            docker pull $DOCKER_REGISTRY/${{ secrets.DOCKER_USERNAME }}/frontend:latest
            docker stop frontend || true
            docker rm frontend || true
            docker run -d --name frontend -p 80:80 $DOCKER_REGISTRY/${{ secrets.DOCKER_USERNAME }}/frontend:latest
          EOF
