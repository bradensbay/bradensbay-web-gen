name: Build and Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
<<<<<<< HEAD
  runs-on: ubuntu-latest
    name: Build and Deploy Services
    runs-on: ubuntu-latest

    env:
      DOCKER_REGISTRY: docker.io
      SSH_PORT: 23

=======
>>>>>>> a587218e9696c0c08d6fc93e9b7c144003c23cad
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Create a .zip file for container-service
      - name: Create Container Service ZIP
        run: |
          cd backend/container-service
          zip -r container-service.zip ./*
          mv container-service.zip ../../container-service.zip

      # Upload the .zip file as an artifact
      - name: Upload Container Service ZIP
        uses: actions/upload-artifact@v4
        with:
          name: container-service
          path: container-service.zip

      # Build and push Docker images for backend services
      - name: Build and Push Backend Services
        run: |
          declare -A service_ports=(
            ["auth-service"]=3005
            ["new-user-service"]=3006
            ["prompt-service"]=3003
            ["start-vm-service"]=3001
            ["update-key-service"]=3002
            ["user-service"]=3004
          )
          for service in "${!service_ports[@]}"; do
            docker build -t $DOCKER_REGISTRY/${{ secrets.DOCKER_USERNAME }}/$service:latest backend/$service
            docker push $DOCKER_REGISTRY/${{ secrets.DOCKER_USERNAME }}/$service:latest
          done

      # Build and push Docker image for frontend
      - name: Build and Push Frontend
        run: |
          docker build -t $DOCKER_REGISTRY/${{ secrets.DOCKER_USERNAME }}/frontend:latest frontend
          docker push $DOCKER_REGISTRY/${{ secrets.DOCKER_USERNAME }}/frontend:latest

      # Deploy backend services via SSH
      - name: Deploy Backend Services
        run: |
          declare -A service_ports=(
            ["auth-service"]=3005
            ["new-user-service"]=3006
            ["prompt-service"]=3003
            ["start-vm-service"]=3001
            ["update-key-service"]=3002
            ["user-service"]=3004
          )
          for service in "${!service_ports[@]}"; do
            port=${service_ports[$service]}
            if [ "$service" == "prompt-service" ]; then
              env_var="-e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} -e CONTAINER_SERVICE_KEY=${{ secrets.CONTAINER_SERVICE_KEY }}"
            else
              env_var="-e CONTAINER_SERVICE_KEY=${{ secrets.CONTAINER_SERVICE_KEY }}"
            fi
            sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no -p $SSH_PORT ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} <<EOF
              docker pull $DOCKER_REGISTRY/${{ secrets.DOCKER_USERNAME }}/$service:latest
              docker stop $service || true
              docker rm $service || true
              docker run -d --name $service -p $port:$port $env_var $DOCKER_REGISTRY/${{ secrets.DOCKER_USERNAME }}/$service:latest
          EOF
          done

          # Deploy container-service in a screen session
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no -p $SSH_PORT ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} <<EOF
            mkdir -p /home/christian/container-service
            cd /home/christian/container-service
            curl -o container-service.zip https://github.com/christianGRogers/bradensbay-web-gen/releases/download/latest/container-service.zip
            unzip -o container-service.zip
            npm install
            screen -dmS container-service bash -c '
              CONTAINER_SERVICE_KEY=${{ secrets.CONTAINER_SERVICE_KEY }} PORT=3007 node index.js
            '
          EOF
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}

      # Deploy frontend via SSH
      - name: Deploy Frontend
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no -p $SSH_PORT ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} <<EOF
            docker pull $DOCKER_REGISTRY/${{ secrets.DOCKER_USERNAME }}/frontend:latest
            docker stop frontend || true
            docker rm frontend || true
            docker run -d --name frontend -p 80:80 $DOCKER_REGISTRY/${{ secrets.DOCKER_USERNAME }}/frontend:latest
          EOF
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}

      # Install dependencies and run tests for backend services
      - name: Run Unit Tests
        run: |
          for service in backend/*; do
            if [ -f "$service/package.json" ]; then
              cd $service
              npm install
              npm test
              cd -
            fi
          done
